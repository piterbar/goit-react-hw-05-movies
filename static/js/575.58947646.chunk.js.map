{"version":3,"file":"static/js/575.58947646.chunk.js","mappings":"mNACO,SAASA,EAAOC,GAAe,IAAd,QAAEC,GAASD,EACjC,OACEE,EAAAA,EAAAA,KAAA,OAAAC,UACED,EAAAA,EAAAA,KAAA,MAAAC,SACGF,EAAQG,KAAIC,IAAA,IAAC,GAAEC,EAAE,OAAEC,EAAM,QAAEC,GAASH,EAAA,OACnCI,EAAAA,EAAAA,MAAA,MAAAN,SAAA,EACED,EAAAA,EAAAA,KAAA,KAAAC,SAAII,KACJL,EAAAA,EAAAA,KAAA,KAAAC,SAAIK,MAFGF,EAGJ,OAKf,CCRe,SAASI,IACtB,MAAM,QAAEC,IAAYC,EAAAA,EAAAA,OACbX,EAASY,IAAcC,EAAAA,EAAAA,UAAS,CAAC,GAqBxC,IAnBAC,EAAAA,EAAAA,YAAU,KACYC,WAClB,IACE,MACMC,SADaC,EAAAA,EAAAA,IAAgBZ,IACfa,QAAQf,KAAIJ,IAAA,IAAC,GAAEM,EAAE,OAAEC,EAAM,QAAEC,GAASR,EAAA,MAAM,CAC5DM,KACAC,SACAC,UACD,IACD,IAAKS,EAAOG,OACV,MAAM,IAAIC,MAAM,IAElBR,EAAWI,EACb,CAAE,MAAOK,GACPC,EAAAA,GAAMD,MAAM,mBACd,GAEFE,CAAYb,EAAQ,GACnB,CAACA,IACAc,OAAOC,KAAKzB,GAASmB,OAAS,EAChC,OACElB,EAAAA,EAAAA,KAAAyB,EAAAA,SAAA,CAAAxB,UACED,EAAAA,EAAAA,KAACH,EAAO,CAACE,QAASA,KAG1B,C","sources":["components/movieDetails/reviews/Reviews.jsx","pages/ReviewsPage.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nexport function Reviews({ reviews }) {\n  return (\n    <div>\n      <ul>\n        {reviews.map(({ id, author, content }) => (\n          <li key={id}>\n            <p>{author}</p>\n            <p>{content}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\nReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      author: PropTypes.string,\n      content: PropTypes.string,\n    })\n  ),\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { fetchReviewById } from '../service/apiService';\nimport { Reviews } from 'components/movieDetails/reviews/Reviews';\n\nexport default function CastPage() {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState({});\n\n  useEffect(() => {\n    const getCastInfo = async id => {\n      try {\n        const data = await fetchReviewById(id);\n        const result = data.results.map(({ id, author, content }) => ({\n          id,\n          author,\n          content,\n        }));\n        if (!result.length) {\n          throw new Error('');\n        }\n        setReviews(result);\n      } catch (error) {\n        toast.error('No reviews found');\n      }\n    };\n    getCastInfo(movieId);\n  }, [movieId]);\n  if (Object.keys(reviews).length > 0)\n    return (\n      <>\n        <Reviews reviews={reviews} />\n      </>\n    );\n}\n"],"names":["Reviews","_ref","reviews","_jsx","children","map","_ref2","id","author","content","_jsxs","CastPage","movieId","useParams","setReviews","useState","useEffect","async","result","fetchReviewById","results","length","Error","error","toast","getCastInfo","Object","keys","_Fragment"],"sourceRoot":""}